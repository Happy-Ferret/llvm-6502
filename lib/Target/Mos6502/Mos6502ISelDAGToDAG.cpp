//===-- Mos6502ISelDAGToDAG.cpp - A dag to dag inst selector for Mos6502 ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MOS6502 target.
//
//===----------------------------------------------------------------------===//

#include "Mos6502TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// Mos6502DAGToDAGISel - MOS6502 specific code to select MOS6502 machine
/// instructions for SelectionDAG operations.
///
namespace {
class Mos6502DAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Mos6502 Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const Mos6502Subtarget *Subtarget;
public:
  explicit Mos6502DAGToDAGISel(Mos6502TargetMachine &tm) : SelectionDAGISel(tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<Mos6502Subtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  SDNode *Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectADDRrr(SDValue N, SDValue &R1, SDValue &R2);
  bool SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset);

  /// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
  /// inline asm expressions.
  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;

  const char *getPassName() const override {
    return "MOS6502 DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "Mos6502GenDAGISel.inc"
};
}  // end anonymous namespace


/// createMos6502ISelDag - This pass converts a legalized DAG into a
/// MOS6502-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createMos6502ISelDag(Mos6502TargetMachine &TM) {
  return new Mos6502DAGToDAGISel(TM);
}
